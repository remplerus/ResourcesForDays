buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.18.2-1.0'
group = 'com.rempler.rfd' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ResourcesForDays'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.18.2'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                rfd {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('runserver')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                rfd {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'rfd', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                rfd {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'jei'
        url 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'mezz.jei'
        }
    }

    maven {
        name 'ex nihilo repo'
        url 'https://repo.jacob-williams.me/repository/maven-releases/'
        content {
            includeGroup 'novamachina.exnihilosequentia'
        }
    }

    maven {
        name 'cursemaven'
        url 'https://cfa2.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.76'
    
    implementation fg.deobf("curse.maven:cfd-349460:3739573")
    //implementation fg.deobf("novamachina.exnihilosequentia:ExNihiloSequentia:1.18.2-20220530-183458")
    implementation fg.deobf("blank:ExNihiloSequentia:+")
    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:+")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "rfd",
            "Specification-Vendor": "rfd",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"rfd",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')